package management

import (
	"database/sql"
	"database/sql/driver"
	"errors"
	"fmt"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/ResultadosDigitais/x9/db"
	"github.com/stretchr/testify/assert"
)

var dbconn *sql.DB

func setupDB(query string, r [][]driver.Value, err error) {
	conn, mock, _ := sqlmock.New()
	dbconn = conn
	db.SetConn(conn)
	rows := sqlmock.NewRows([]string{
		"id",
		"internal_id",
		"name",
		"repository",
		"filename",
		"tool",
		"value",
		"false_positive",
		"issue_url"})

	for _, v := range r {
		rows = rows.AddRow(v...)
	}
	if err != nil {
		if r != nil {
			mock.ExpectPrepare(query).ExpectQuery().WillReturnError(err)
		} else {
			mock.ExpectPrepare(query).ExpectExec().WillReturnError(err)
		}
	} else {
		if r != nil {
			mock.ExpectPrepare(query).ExpectQuery().WillReturnRows(rows)
		} else {
			mock.ExpectPrepare(query).ExpectExec().WillReturnResult(sqlmock.NewResult(0, 1))
		}
	}
}

func shutdownDB() {
	dbconn.Close()
}

func TestGetVulnerabilityByID(t *testing.T) {
	setupDB(
		"^SELECT (.*) FROM (.*) WHERE id = (.*)$",
		[][]driver.Value{
			[]driver.Value{"123", "456", "Vuln1", "Repo", "file", "tool", "value", false, "url"},
		},
		nil,
	)
	v, err := GetVulnerabilityByID("123")
	fmt.Println("====>", err)
	shutdownDB()
	assert.NoError(t, err)
	expected := Vulnerability{
		ID:            "123",
		InternalID:    "456",
		Name:          "Vuln1",
		Repository:    "Repo",
		FileName:      "file",
		Tool:          "tool",
		Value:         "value",
		FalsePositive: false,
		IssueURL:      "url",
	}
	assert.EqualValues(t, expected, v)

}

func TestGetVulnerabilityByName(t *testing.T) {
	setupDB(
		"^SELECT (.*) FROM (.*) WHERE name = (.*)$",
		[][]driver.Value{
			[]driver.Value{"123", "456", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
			[]driver.Value{"789", "567", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
		},
		nil,
	)
	v, err := GetVulnerabilitiesByName("Vuln2")
	shutdownDB()
	assert.NoError(t, err)
	expected := []Vulnerability{
		Vulnerability{"123", "456", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
		Vulnerability{"789", "567", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
	}
	assert.EqualValues(t, expected, v)

}

func TestGetVulnerabilityByRepo(t *testing.T) {
	setupDB(
		"^SELECT (.*) FROM (.*) WHERE repository LIKE (.*)$",
		[][]driver.Value{
			[]driver.Value{"123", "456", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
			[]driver.Value{"789", "567", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
		},
		nil,
	)
	v, err := GetVulnerabilitiesByRepo("Vuln2")
	fmt.Println("====>", err)

	shutdownDB()
	assert.NoError(t, err)
	expected := []Vulnerability{
		Vulnerability{"123", "456", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
		Vulnerability{"789", "567", "Vuln2", "Repo", "file", "tool", "value", false, "url"},
	}
	assert.EqualValues(t, expected, v)

}

func TestInsertVulnerability(t *testing.T) {
	setupDB(
		"^INSERT INTO (.*) VALUES (.*)$",
		nil,
		nil,
	)
	v := Vulnerability{"123", "456", "Vuln2", "Repo", "file", "tool", "value", false, "url"}

	_, err := InsertVulnerability(v)
	fmt.Println("====>", err)

	shutdownDB()
	assert.NoError(t, err)
}

func TestInsertVulnerabilityShouldFail(t *testing.T) {
	setupDB(
		"^INSERT INTO (.*) VALUES (.*)$",
		nil,
		errors.New("DB error"),
	)
	v := Vulnerability{"123", "456", "Vuln2", "Repo", "file", "tool", "value", false, "url"}

	_, err := InsertVulnerability(v)
	fmt.Println("====>", err)

	shutdownDB()
	assert.Error(t, err)
}
